<?php

/**
 * @file
 * Scheduler publishes and unpublishes nodes on dates specified by the user.
 */

// The default time that will be used, until Admin sets a different value.
define('BREXIT_DATE_FORMAT', 'Y-m-d H:i:s');
define('BREXIT_PUBLICATION_DATETIME', '2019-03-30 00:00:00');

/**
 * Implements hook_permission().
 */
function brexit_permission() {
  return array(
    'administer brexit' => array(
      'title' => t('Administer brexit'),
      'description' => t('Configure brexit options'),
    ),
    'schedule publishing brexit update' => array(
      'title' => t('Update content for Brexit'),
      'description' => t('Allows users to set revision for automatic publication for Brexit'),
    ),

  );
}

/**
 * Implements hook_menu().
 */
function brexit_menu() {
  $items = array();
  $items['admin/config/content/brexit'] = array(
    'title' => 'Brexit',
    'description' => "Configure settings and killswitch",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('brexit_admin'),
    'access arguments' => array('administer brexit'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'brexit.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function brexit_form_alter(&$form, $form_state) {
  // On edit node form.
  if (!empty($form['#node_edit_form'])) {
    $node = $form['#node'];

    // Get status and display message.
    if ($brexit = (isset($node->brexit) && $node->brexit)) {
      $locked = t('This content is locked since there is a revision scheduled for Brexit update.');
      drupal_set_message($locked, 'status');
    }

    // Allowed to manage the scheduling.
    if (user_access('schedule publishing brexit update')) {
      $form['options']['brexit'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable Brexit scheduled publishing (Leave this revision in draft)'),
        '#default_value' => $brexit ? 1 : 0,
        '#weight' => 3,
      );
    }
    // If not allwowed and revision is sheduled, lock the content.
    elseif ($brexit) {
      // Lock all fields and buttons.
      foreach ([$form, $form['actions']] as $item) {
        foreach ($item as $key => $value) {
          if (drupal_substr($key, 0, 1) != '#' && is_array($form[$key])) {
            $form[$key]['#disabled'] = TRUE;
            $form[$key]['#attributes']['title'] = $locked;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_load().
 */
function brexit_node_load($nodes, $types) {
  $nids = array_keys($nodes);
  $result = db_query('SELECT * FROM {brexit} WHERE nid IN (:nids)', array(':nids' => $nids));
  foreach ($result as $record) {
    $nid = $record->nid;
    $nodes[$nid]->brexit = 1;
  }
}

/**
 * Implements hook_node_view().
 */
function brexit_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && isset($node->brexit) && $node->brexit && node_is_page($node) && user_access('schedule publishing brexit update')) {
    drupal_set_message(t('This content has revision for Brexit Sheduled'), 'status');
  }
}

/**
 * Implements hook_node_presave().
 */
function brexit_node_presave($node) {
  // Set for Brexit update.
  if (isset($node->brexit) && $node->brexit) {
    drupal_set_message(t('Brexit sheduled publication set'), 'status');
  }
}

/**
 * Implements hook_node_insert().
 */
function brexit_node_insert($node) {
  if (isset($node->brexit) && $node->brexit) {
    db_insert('brexit')->fields(array(
      'nid' => $node->nid,
      'vid' => $node->vid,
    ))->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function brexit_node_update($node) {
  // Update DB with checkbox value.
  if (isset($node->brexit) && $node->brexit) {
    // If not draft, consider this is not checked.
    if ($node->workbench_moderation_state_new != 'published') {
      db_merge('brexit')->key(array('nid' => $node->nid))->fields(array(
        'vid' => $node->vid,
      ))->execute();
    }
  }
  else {
    brexit_node_delete($node);
  }
}

/**
 * Implements hook_node_delete().
 */
function brexit_node_delete($node) {
  db_delete('brexit')->condition('nid', $node->nid)->execute();
}

/**
 * Implements hook_cron().
 */
function brexit_cron() {
  // Check if Brexit update is active.
  $active = variable_get('brexit_active', FALSE);
  $when = variable_get('brexit_publication_datetime', NULL);

  if (!$active || $when == NULL) {
    return;
  }

  $when = strtotime($when);
  $now = time();

  if ($when > $now) {
    return;
  }

  watchdog('brexit update', 'Cron Brexit starts', NULL, WATCHDOG_NOTICE);
  // Load the cron functions file.
  module_load_include('inc', 'brexit', 'brexit.cron');

  // Use drupal_static to find out if brexit cron is running.
  // @see brexit_cron_is_running()
  $brexit_cron = &drupal_static(__FUNCTION__, FALSE);
  $brexit_cron = TRUE;

  // Clear cache if node got published
  // Varnish has already purge rules but list and search pages need to.
  if (_brexit_publish()) {
    cache_clear_all();
  }
  // If no results, we could deactivate but it's temp, no need.
  // Reset the static scheduler_cron flag.
  drupal_static_reset(__FUNCTION__);
}

/**
 * Return whether Brexit cron is running.
 *
 * @return bool
 *   TRUE if brexit_cron is currently running. FALSE if not.
 */
function brexit_cron_is_running() {
  return drupal_static('brexit_cron');
}

/**
 * Publish nodes with Brexit.
 *
 * @return bool
 *   TRUE if any node has been published, FALSE otherwise.
 */
function _brexit_publish() {
  $result = FALSE;

  // Get all content set for publication.
  $query = db_select('brexit', 's');
  $query->addField('s', 'nid');
  $query->addField('s', 'vid');
  $query->addJoin('INNER', 'node', 'n', 's.nid = n.nid');
  $query_result = $query->execute();

  $nids = array();
  $vids = array();
  while ($node = $query_result->fetchObject()) {
    $nids[] = $node->nid;
    $vids[$node->nid] = $node->vid;
  }

  foreach ($nids as $nid) {
    // Load specific revision (issue with published node always recreated).
    $n = node_load($nid, $vids[$nid]);

    watchdog('brexit update', 'Publishing node @type: %title.', array('@type' => $n->type, '%title' => $n->title), WATCHDOG_NOTICE, l(t('view'), 'node/' . $n->nid, array('alias' => TRUE)));

    $n->workbench_moderation_state_new = workbench_moderation_state_published();
    $n->revision = FALSE;
    // Unset Brexit value, it will then be removed by brexit_node_update().
    $n->brexit = 0;
    $n->changed = time();
    $n->log = 'Brexit automatic publishing';
    node_save($n);

    $result = TRUE;
  }

  return $result;
}

/**
 * Implements hook_views_api().
 */
function brexit_views_api() {
  return array(
    'api' => 3,
  );
}
