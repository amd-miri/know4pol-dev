<?php

/**
 * @file
 * This file contains the know4pol_core feature install functions.
 */

/**
 * Implements hook_enable().
 */
function know4pol_core_enable() {
  drupal_set_message(t("The feature Knowledge4policy Core has been enabled."), 'status');
}

/**
 * Implements hook_disable().
 */
function know4pol_core_disable() {
  drupal_set_message(t("The feature Knowledge4policy Core has been disabled."), 'status');
}

/**
 * Enable some contrib modules.
 */
function know4pol_core_install() {
  module_enable(array('admin_views',
    'apachesolr',
    'apachesolr_search',
    'apachesolr_attachments',
    'apachesolr_multisitesearch',
    'apachesolr_sort',
    'better_exposed_filters',
    'context_og',
    'expanding_formatter',
    'facetapi_bonus',
    'feeds',
    'feeds_ui',
    'feeds_tamper',
    'feeds_tamper_ui',
    'feeds_et',
    'globalredirect',
    'match_redirect',
    'migrate',
    'migrate_ui',
    'migrate_d2d',
    'migrate_d2d_ui',
    'migrate_extras',
    'migrate_group_settings',
    'multisite_og_button',
    'nexteuropa_newsroom',
    'nexteuropa_piwik',
    'nexteuropa_varnish',
    'node_revision_delete',
    'og_menu',
    'og_menu_default_links',
    'og_vocab',
    'redirect',
    'views_rss',
    'views_rss_core',
    'views_rss_dc',
    'metatag',
    'metatag_context',
    'metatag_facebook',
    'metatag_google_plus',
    'metatag_mobile',
    'metatag_opengraph',
    'metatag_twitter_cards',
    'metatag_views',
    'xmlsitemap',
    'xmlsitemap_custom',
    'xmlsitemap_engines',
    'xmlsitemap_menu',
    'xmlsitemap_node',
    'xmlsitemap_taxonomy',
    'xmlsitemap_user',
  ), TRUE);
}

/**
 * Enable hierarchical_select and feeds_ex modules.
 */
function know4pol_core_update_7001() {
  module_enable(array(
    'hierarchical_select',
    'field_default_token',
    'feeds_ex',
  ), TRUE);
}

/**
 * Enable remaining ds modules.
 */
function know4pol_core_update_7002() {
  module_enable(array(
    'ds_extras',
    'ds_format',
    'ds_forms',
    'ds_search',
    'nexteuropa_formatters_views',
  ), TRUE);
}

/**
 * Enable some needed modules.
 */
function know4pol_core_update_7003() {
  module_enable(array(
    'field_validation',
    'field_validation_extras',
    'field_validation_ui',
    'property_validation',
    'facetapi_select',
    'nexteuropa_formatters_fields',
    'splash_screen',
    'conditional_fields',
  ), TRUE);
}

/**
 * Enable some modules.
 */
function know4pol_core_update_7004() {
  module_enable(array(
    'views_data_export',
    'feeds_tamper_conditional',
    'date_facets',
  ), TRUE);
}

/**
 * Enable views_autocomplete_filters modules.
 */
function know4pol_core_update_7005() {
  module_enable(array(
    'views_autocomplete_filters',
  ), TRUE);
}

/**
 * Enable know4pol_search module.
 */
function know4pol_core_update_7006() {
  module_enable(array(
    'know4pol_search',
  ), TRUE);
}

/**
 * Enable weight module.
 */
function know4pol_core_update_7007() {
  module_enable(array(
    'weight',
  ), TRUE);
}

/**
 * Enable facetapi_search module.
 */
function know4pol_core_update_7008() {
  module_enable(array(
    'facetapi_search',
  ), TRUE);
}

/**
 * Enable statistics and statistics_counter modules.
 */
function know4pol_core_update_7009() {
  module_enable(array('statistics', 'statistics_counter'), TRUE);
}

/**
 * Enable cacheflush module.
 */
function know4pol_core_update_7010() {
  module_enable(array(
    'cacheflush',
    'cacheflush_advanced',
    'cacheflush_entity',
    'cacheflush_rules',
    'cacheflush_ui',
  ), TRUE);
}

/**
 * Enable better_watchdog_ui modules.
 */
function know4pol_core_update_7011() {
  module_enable(array('better_watchdog_ui'), TRUE);
}

/**
 * Enable needed modules for the new Atomium theme.
 */
function know4pol_core_update_7012() {
  module_enable(array(
    'xautoload',
    'registryonsteroids',
    'registryonsteroids_alter',
    'nexteuropa_ecl_migrate',
  ), TRUE);
  _nexteuropa_ecl_migrate_dt_menus();
}

/**
 * Disable unused modules and enable remove_duplicates/xmlsitemap.
 */
function know4pol_core_update_7013() {
  module_disable(array(
    'expanding_formatter',
    'hierarchical_select',
    'og_menu',
    'og_menu_default_links',
  ), FALSE);
  drupal_uninstall_modules(array(
    'expanding_formatter',
    'hierarchical_select',
    'og_menu',
    'og_menu_default_links',
  ), FALSE);
  module_enable(array(
    'remove_duplicates',
    'xmlsitemap',
    'xmlsitemap_custom',
    'xmlsitemap_engines',
    'xmlsitemap_menu',
    'xmlsitemap_node',
    'xmlsitemap_taxonomy',
    'xmlsitemap_user',
  ), TRUE);
}

/**
 * Disable cacheflush and enable know4pol_ecl.
 */
function know4pol_core_update_7014() {
  module_disable(array(
    'cacheflush_advanced',
    'cacheflush_rules',
    'cacheflush_ui',
    'cacheflush_entity',
    'cacheflush',
  ), FALSE);
  drupal_uninstall_modules(array(
    'cacheflush_advanced',
    'cacheflush_rules',
    'cacheflush_ui',
    'cacheflush_entity',
    'cacheflush',
  ), FALSE);
  module_enable(array(
    'know4pol_ecl',
  ), TRUE);
}

/**
 * Enable multisite_formatters.
 */
function know4pol_core_update_7015() {
  module_enable(array(
    'multisite_formatters',
  ), TRUE);
}

/**
 * Enable og_menu module.
 */
function know4pol_core_update_7016() {
  module_enable(array(
    'og_menu',
    'og_menu_default_links',
  ), TRUE);
}

/**
 * Enable apachesolr_realtime and field_collection modules.
 */
function know4pol_core_update_7017() {
  module_enable(array(
    'apachesolr_realtime',
    'apachesolr_realtime_reports',
    'field_collection',
  ), TRUE);
}

/**
 * Update the know4pol_core weight.
 */
function know4pol_core_update_7018() {
  db_update('system')
    ->fields(array('weight' => 999))
    ->condition('name', 'know4pol_core', '=')
    ->execute();
}

/**
 * Remove a corrupted menu link.
 */
function know4pol_core_update_7019() {
  db_delete('menu_links')
    ->condition('link_title', 'Manage KS menus')
    ->execute();
}

/**
 * Enable markdown modules.
 */
function know4pol_core_update_7020() {
  module_enable(array(
    'markdown',
  ), TRUE);
}

/**
 * Update all Full node embeds.
 */
function know4pol_core_update_7021() {
  // Update the field_data_body table.
  db_update('field_data_body')
    ->expression('body_value', 'replace(body_value, :old, :new)', array(
      ':old' => ':full]',
      ':new' => ':node_embed]',
    ))
    ->execute();
  db_update('field_data_body')
    ->expression('body_value', 'replace(body_value, :old, :new)', array(
      ':old' => 'as Full content}',
      ':new' => 'as Content}',
    ))
    ->execute();

  // Update the field_revision_body table.
  db_update('field_revision_body')
    ->expression('body_value', 'replace(body_value, :old, :new)', array(
      ':old' => ':full]',
      ':new' => ':node_embed]',
    ))
    ->execute();
  db_update('field_revision_body')
    ->expression('body_value', 'replace(body_value, :old, :new)', array(
      ':old' => 'as Full content}',
      ':new' => 'as Content}',
    ))
    ->execute();

  // Update the field_data_field_ne_body table.
  db_update('field_data_field_ne_body')
    ->expression('field_ne_body_value', 'replace(field_ne_body_value, :old, :new)', array(
      ':old' => ':full]',
      ':new' => ':node_embed]',
    ))
    ->execute();
  db_update('field_data_field_ne_body')
    ->expression('field_ne_body_value', 'replace(field_ne_body_value, :old, :new)', array(
      ':old' => 'as Full content}',
      ':new' => 'as Content}',
    ))
    ->execute();

  // Update the field_revision_field_ne_body table.
  db_update('field_revision_field_ne_body')
    ->expression('field_ne_body_value', 'replace(field_ne_body_value, :old, :new)', array(
      ':old' => ':full]',
      ':new' => ':node_embed]',
    ))
    ->execute();
  db_update('field_revision_field_ne_body')
    ->expression('field_ne_body_value', 'replace(field_ne_body_value, :old, :new)', array(
      ':old' => 'as Full content}',
      ':new' => 'as Content}',
    ))
    ->execute();
}

/**
 * NEPT-2101: Align the translatable field language on the content one.
 */
function know4pol_core_update_7022(&$sandbox) {
  if (!isset($sandbox['field_instance_list']) && !isset($sandbox['node_list'])) {
    // Init the batch for fields settings list.
    $content_types = node_type_get_types();
    $sandbox['field_instance_list'] = array();
    $watchdog_info = array();
    foreach (array_keys($content_types) as $type) {
      // Get the list of content type that do not use Entity translation.
      if (variable_get('language_content_type_' . $type, 0) != ENTITY_TRANSLATION_ENABLED) {
        $type_fields = field_info_instances('node', $type);
        // Get the list of fields in these content types that are translatable.
        foreach (array_keys($type_fields) as $field_name) {
          $field_info = field_info_field($field_name);
          if (!empty($field_info['translatable'])) {
            $sandbox['field_instance_list'][] = array($type, $field_name);
            $watchdog_info[] = '(' . $field_name . ' - ' . $type . ')';
          }
        }
      }
    }
    watchdog('know4pol_core_update_7022',
      'Those field instances will be screened: %fields',
      array(
        '%fields' => implode(', ', $watchdog_info),
      ),
      WATCHDOG_INFO
    );
  }

  // Retrieve the problematic nodes for every affected fields.
  if (!empty($sandbox['field_instance_list'])) {
    if (!isset($sandbox['node_list'])) {
      // Init the node list array.
      $sandbox['node_list'] = array();
    }

    $watchdog_info = array();
    $field_instance = array_shift($sandbox['field_instance_list']);
    $query = db_select('field_revision_' . $field_instance[1], 'fr');
    $query->join('node', 'n', 'n.nid = fr.entity_id');
    $query->where('n.language <> fr.language')
      ->condition('n.type', $field_instance[0])
      ->fields('n', array('nid', 'language'));
    $node_list = $query->execute()->fetchAllKeyed();

    foreach ($node_list as $nid => $language) {
      $key = $field_instance[0] . '_' . $nid . '_' . $field_instance[1];
      $sandbox['node_list'][$key] = array(
        $field_instance[1],
        $language,
        $nid,
        $field_instance[0],
      );
      $watchdog_info[] = $nid;
    }
    watchdog('know4pol_core_update_7022',
      'Those nodes will be screened for %field of %type: %nids',
      array(
        '%field' => $field_instance[1],
        '%type' => $field_instance[0],
        '%nids' => implode(', ', $watchdog_info),
      ),
      WATCHDOG_INFO
    );
  }

  // Treat field language values for every retrieved nodes.
  if (empty($sandbox['field_instance_list']) && !empty($sandbox['node_list'])) {
    $node_info = array_shift($sandbox['node_list']);
    $data_table_name = 'field_data_' . $node_info[0];
    $revision_table_name = 'field_revision_' . $node_info[0];

    // Clean the field data & revision tables a duplicate value but with a
    // different language. It happens when a user updated the node to fix
    // manually the missing value in the field.
    // Field_data cleaning.
    $problematic_vid = db_select($data_table_name, 'fd')
      ->fields('fd', array('revision_id'))
      ->condition('fd.entity_type', 'node')
      ->condition('fd.entity_id', $node_info[2])
      ->condition('fd.bundle', $node_info[3])
      ->condition('fd.language', $node_info[1])
      ->execute()
      ->fetchCol();

    if (!empty($problematic_vid)) {
      db_delete($data_table_name)
        ->condition('revision_id', $problematic_vid, 'IN')
        ->condition('entity_id', $node_info[2])
        ->condition('entity_type', 'node')
        ->condition('language', $node_info[1], '<>')
        ->execute();
    }

    // Field_revision cleaning.
    $problematic_vid = db_select($revision_table_name, 'fd')
      ->fields('fd', array('revision_id'))
      ->condition('fd.entity_type', 'node')
      ->condition('fd.entity_id', $node_info[2])
      ->condition('fd.bundle', $node_info[3])
      ->condition('fd.language', $node_info[1])
      ->execute()
      ->fetchCol();

    if (!empty($problematic_vid)) {
      db_delete($revision_table_name)
        ->condition('revision_id', $problematic_vid, 'IN')
        ->condition('entity_id', $node_info[2])
        ->condition('entity_type', 'node')
        ->condition('language', $node_info[1], '<>')
        ->execute();
    }

    // Fix the language value error in the field data table for the current nid.
    db_update($data_table_name)
      ->fields(array('language' => $node_info[1]))
      ->condition('entity_type', 'node')
      ->condition('entity_id', $node_info[2])
      ->condition('bundle', $node_info[3])
      ->execute();

    // Fix the language value error in the field revision table for the
    // current nid.
    db_update('field_revision_' . $node_info[0])
      ->fields(array('language' => $node_info[1]))
      ->condition('entity_type', 'node')
      ->condition('entity_id', $node_info[2])
      ->condition('bundle', $node_info[3])
      ->execute();
  }

  $sandbox['#finished'] = (empty($sandbox['field_instance_list']) && empty($sandbox['node_list']));
}

/**
 * Enable field_object, elements and cer modules.
 */
function know4pol_core_update_7023() {
  module_enable(array(
    'elements',
    'field_object',
    'cer',
  ), TRUE);
}

/**
 * Enable multisite_filters module and disable apachesolr_realtime.
 */
function know4pol_core_update_7024() {
  module_disable(array(
    'apachesolr_realtime_reports',
    'apachesolr_realtime',
  ), FALSE);
  drupal_uninstall_modules(array(
    'apachesolr_realtime_reports',
    'apachesolr_realtime',
  ), FALSE);
  module_enable(array(
    'multisite_filters',
  ), TRUE);
}

/**
 * Uninstall ds_format.
 */
function know4pol_core_update_7025() {
  module_disable(array(
    'ds_format',
  ), FALSE);
  drupal_uninstall_modules(array(
    'ds_format',
  ), FALSE);
}

/**
 * Uninstall metatag_mobile.
 */
function know4pol_core_update_7026() {
  module_disable(array(
    'metatag_mobile',
  ), FALSE);
  drupal_uninstall_modules(array(
    'metatag_mobile',
  ), FALSE);
}

/**
 * Enable views_json module.
 */
function know4pol_core_update_7027() {
  module_enable(array(
    'views_json',
  ), TRUE);
}

/**
 * Remove a corrupted record in DB .
 */
function know4pol_core_update_7028() {
  db_delete('og_membership')
    ->condition('id', 1, '=')
    ->execute();
}

/**
 * Enable brexit module.
 */
function know4pol_core_update_7029() {
  module_enable(array(
    'brexit',
  ), TRUE);
}

/**
 * Enable nexteuropa_scheduler_message module.
 */
function know4pol_core_update_7030() {
  module_disable(array(
    'nexteuropa_scheduler_message',
  ), FALSE);
  drupal_uninstall_modules(array(
    'nexteuropa_scheduler_message',
  ), FALSE);
}

/**
 * Migrate data to an existing common field.
 */
function know4pol_core_update_7031() {
  db_delete('field_data_field_geographic_coverage')
    ->condition('bundle', 'publication')
    ->execute();

  $query = db_select('field_data_field_pub_related_countries', 'fc')
    ->fields('fc', array('entity_id', 'field_pub_related_countries_tid'));
  $result = $query->execute()->fetchAll();

  foreach ($result as $row) {
    $node = node_load($row->entity_id);
    $node->field_geographic_coverage[LANGUAGE_NONE][]['tid'] = $row->field_pub_related_countries_tid;
    node_save($node);
  }
}

/**
 * Create new setting menu for groups.
 */
function know4pol_core_update_7032() {
  $link_path = 'menutoken/' . uniqid();
  $item = array(
    'link_path' => $link_path,
    'link_title' => "Manage KS settings",
    'weight' => 50,
    'expanded' => 1,
  // Manage KS settings.
    'plid' => 3689,
    'options' => array(
      'menu_token_link_path' => 'group/node/[site:og-context--node:nid]/admin/settings',
      'menu_token_data' => array(),
      'menu_token_options' =>
      array(
        'clear' => 0,
      ),
      'attributes' =>
      array(
        'title' => '',
      ),
      'alter' => TRUE,
      'menu_token_link_uuid' => $link_path,
    ),
    'menu_token_enabled' => 1,
    'menu_token_type_node' => '_none',
    'menu_token_type_user' => '_none',
    'menu_token_clear' => 0,
  );

  menu_link_save($item);
}

/**
 * KNOW4POL-469 - Remove duplicates from field_data_field_tags.
 */
function know4pol_core_update_7033() {
  // Get the list of tags which exist more than once.
  $query = db_select('field_data_field_tags', 'ft')
    ->fields('ft', array(
      'entity_type',
      'entity_id',
      'revision_id',
      'deleted',
      'language',
      'field_tags_tid',
    ));
  $query->addExpression('max(delta)', 'delta_keep');
  $query->groupBy('entity_type')
    ->groupBy('entity_id')
    ->groupBy('revision_id')
    ->groupBy('deleted')
    ->groupBy('language')
    ->groupBy('field_tags_tid')
    ->having('COUNT(*) > 1');

  // Delete other instances with delta lower.
  foreach ($query->execute()->fetchAll() as $entry) {
    db_delete('field_data_field_tags')
      ->condition('entity_type', $entry->entity_type)
      ->condition('entity_id', $entry->entity_id)
      ->condition('revision_id', $entry->revision_id)
      ->condition('deleted', $entry->deleted)
      ->condition('language', $entry->language)
      ->condition('field_tags_tid', $entry->field_tags_tid)
      ->condition('delta', $entry->delta_keep, '<')
      ->execute();
  }
}

/**
 * KNOW4POL-487 - Remove duplicates from field_data_field_tags.
 */
function know4pol_core_update_7034() {
  // Get the list of tags which exist more than once.
  $query = db_select('field_data_field_tags', 'ft')
    ->fields('ft', array(
      'entity_type',
      'entity_id',
      'revision_id',
      'deleted',
      'language',
      'field_tags_tid',
    ));
  $query->addExpression('max(delta)', 'delta_keep');
  $query->groupBy('entity_type')
    ->groupBy('entity_id')
    ->groupBy('revision_id')
    ->groupBy('deleted')
    ->groupBy('language')
    ->groupBy('field_tags_tid')
    ->having('COUNT(*) > 1');

  // Delete other instances with delta lower.
  foreach ($query->execute()->fetchAll() as $entry) {
    db_delete('field_data_field_tags')
      ->condition('entity_type', $entry->entity_type)
      ->condition('entity_id', $entry->entity_id)
      ->condition('revision_id', $entry->revision_id)
      ->condition('deleted', $entry->deleted)
      ->condition('language', $entry->language)
      ->condition('field_tags_tid', $entry->field_tags_tid)
      ->condition('delta', $entry->delta_keep, '<')
      ->execute();
  }
}

/**
 * KNOW4POL-593 - Uninstall brexit module, keep feature.
 */
function know4pol_core_update_7035() {
  module_disable([
    'brexit',
  ], FALSE);
  drupal_uninstall_modules([
    'brexit',
  ], FALSE);
  module_enable(array(
    'bulk_schedule',
  ), TRUE);
}

/**
 * KNOW4POL-000 - Clean invalid topics associations.
 */
function know4pol_core_update_7036() {
  $sql = "
  DELETE kst.* FROM field_data_field_ks_related_topics AS kst
  WHERE EXISTS (
    SELECT gid FROM og_membership omt
    WHERE
      omt.etid = kst.field_ks_related_topics_target_id
      AND omt.gid NOT IN (
        SELECT gid FROM og_membership
        WHERE etid = kst.entity_id
      )
  );
  ";
  db_query($sql);
}

/**
 * KNOW4POL-000 - Reassign Megatrends hub content automation.
 */
function know4pol_core_update_7037() {
  // Tag with local taxonomy corresponding to the topic of voc Megatrends hub.
  // 1 - Local taxonomy in og_vocab.
  $sql = "
    INSERT INTO field_data_og_vocabulary
    (entity_type, bundle, deleted, revision_id, language, delta, og_vocabulary_target_id, entity_id)

    SELECT entity_type, bundle, 0, vid, 'und', (
        CASE nid
        WHEN @curNid THEN @curDelta := @curDelta + 1
        ELSE @curDelta := 1
        END
      ) + maxdelta delta, tid, (@curNid := p.nid) nid
    FROM (
        SELECT
           kst.entity_type, bundle, ne.nid, ne.vid,
           COALESCE(
            (
              SELECT max(delta)
              FROM field_data_og_vocabulary
              WHERE entity_id = ne.nid
              AND revision_id = ne.vid
             ) ,-1) maxdelta, ttd.tid
        FROM
          `field_data_field_ks_related_topics` kst
          INNER JOIN og_membership omt ON omt.etid = kst.field_ks_related_topics_target_id
          INNER JOIN node nt ON nt.nid = kst.field_ks_related_topics_target_id
          INNER JOIN node ne ON ne.nid = kst.entity_id
          INNER JOIN `taxonomy_term_data` ttd ON (ttd.name = nt.title AND ttd.vid = 62)

        WHERE
          omt.gid = 7922
          AND bundle in (
            SELECT DISTINCT bundle
            FROM og_vocab
            WHERE
              entity_type = 'node'
              AND vid = 62
          )
          AND NOT EXISTS (
            SELECT tid
            FROM field_data_og_vocabulary ogvc
            WHERE
              ogvc.entity_id = ne.nid
              AND ogvc.revision_id = ne.vid
              AND ogvc.og_vocabulary_target_id = ttd.tid
          )
        ORDER BY ne.nid LIMIT 1000
      ) p JOIN (SELECT @curDelta := 0, @curNid := 0) r
    ;
  ";
  db_query($sql);

  // 2 - Same in the field_revision table.
  $sql = "
    INSERT INTO field_revision_og_vocabulary
    (entity_type, bundle, deleted, revision_id, language, delta, og_vocabulary_target_id, entity_id)

    SELECT entity_type, bundle, 0, vid, 'und', (
        CASE nid
        WHEN @curNid THEN @curDelta := @curDelta + 1
        ELSE @curDelta := 1
        END
      ) + maxdelta delta, tid, (@curNid := p.nid) nid
    FROM (
        SELECT
           kst.entity_type, bundle, ne.nid, ne.vid,
           COALESCE(
            (
              SELECT max(delta)
              FROM field_data_og_vocabulary
              WHERE entity_id = ne.nid
              AND revision_id = ne.vid
             ) ,-1) maxdelta, ttd.tid
        FROM
          `field_data_field_ks_related_topics` kst
          INNER JOIN og_membership omt ON omt.etid = kst.field_ks_related_topics_target_id
          INNER JOIN node nt ON nt.nid = kst.field_ks_related_topics_target_id
          INNER JOIN node ne ON ne.nid = kst.entity_id
          INNER JOIN `taxonomy_term_data` ttd ON (ttd.name = nt.title AND ttd.vid = 62)

        WHERE
          omt.gid = 7922
          AND bundle in (
            SELECT DISTINCT bundle
            FROM og_vocab
            WHERE
              entity_type = 'node'
              AND vid = 62
          )
          AND NOT EXISTS (
            SELECT tid
            FROM field_revision_og_vocabulary ogvc
            WHERE
              ogvc.entity_id = ne.nid
              AND ogvc.revision_id = ne.vid
              AND ogvc.og_vocabulary_target_id = ttd.tid
          )
        ORDER BY ne.nid LIMIT 1000
      ) p JOIN (SELECT @curDelta := 0, @curNid := 0) r
     ;
  ";
  db_query($sql);

  // 3 - Indexes.
  $sql = "
    INSERT INTO taxonomy_index (nid, tid, created, sticky)
    SELECT
       ne.nid, ttd.tid, UNIX_TIMESTAMP(), 0
    FROM
      `field_data_field_ks_related_topics` kst
      INNER JOIN og_membership omt ON omt.etid = kst.field_ks_related_topics_target_id
      INNER JOIN node nt ON nt.nid = kst.field_ks_related_topics_target_id
      INNER JOIN node ne ON ne.nid = kst.entity_id
      INNER JOIN `taxonomy_term_data` ttd ON (ttd.name = nt.title AND ttd.vid = 62)

    WHERE
      omt.gid = 7922
      AND bundle in (
        SELECT DISTINCT bundle
        FROM og_vocab
        WHERE
          entity_type = 'node'
          AND vid = 62
      )
      AND NOT EXISTS (
        SELECT nid
        FROM taxonomy_index ti
        WHERE
          ti.nid = ne.nid
          AND ti.tid = ttd.tid
      )
    ;
  ";
  db_query($sql);

  // 4 - Use topic entity ref 'Megatrend' on all those.
  $sql = "
    INSERT INTO field_data_field_ks_related_topics
    (entity_type, bundle, deleted, entity_id, revision_id, language, delta, field_ks_related_topics_target_id)

    SELECT DISTINCT
      'node' entity_type, bundle, 0 deleted, entity_id, revision_id, 'und' language,
      COALESCE(
        (
          SELECT max(delta) +1
          FROM field_data_field_ks_related_topics kstd
          WHERE kstd.revision_id = kst.revision_id
        ), 0) delta, 38215
    FROM
      `field_data_field_ks_related_topics` kst
      INNER JOIN og_membership omt ON omt.etid = kst.field_ks_related_topics_target_id
      INNER JOIN node nt ON nt.nid = kst.field_ks_related_topics_target_id
      INNER JOIN `taxonomy_term_data` ttd ON (ttd.name = nt.title AND ttd.vid = 62)
    WHERE
      omt.gid = 7922
      AND NOT EXISTS (
        SELECT kstv.entity_id
        FROM field_data_field_ks_related_topics kstv
        WHERE
          kstv.entity_id = kst.entity_id
          AND field_ks_related_topics_target_id = 38215
      )
    GROUP BY
      entity_type, bundle, kst.deleted, entity_id, language, field_ks_related_topics_target_id
    ;
  ";
  db_query($sql);
}

/**
 * KNOW4POL-735,736,737,738 update.
 */
function know4pol_core_update_7038() {
  module_enable(array(
    'know4pol_file_display',
  ),
    TRUE);
}

/**
 * KNOW4POL-747 update.
 */
function know4pol_core_update_7039() {
  // Unpublish dataset not assigned to a KS.
  $sql = "
     UPDATE node ne
     SET status = 0
     WHERE
      ne.status = 1
      AND ne.type = 'dataset'
      AND NOT EXISTS (
        SELECT id FROM og_membership omt
        WHERE
          omt.group_type = 'node'
          AND omt.entity_type = 'node'
          AND omt.etid = ne.nid
       )
    ";
  db_query($sql);
}

/**
 * KNOW4POL-747 update.
 */
function know4pol_core_update_7040() {
  // Update feed importer settings.
  module_enable(array(
    'know4pol_feeds',
  ),
    TRUE);
}
