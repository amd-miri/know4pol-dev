<?php

/**
 * @file
 * Code for the know4pol-search feature.
 */

module_load_include('inc', 'know4pol_search', 'includes/know4pol_search_forms');
module_load_include('inc', 'know4pol_search', 'includes/know4pol_search_blocks');
module_load_include('inc', 'know4pol_search', 'includes/know4pol_search_solr_facet');

/**
 * Implements hook_permission().
 */
function know4pol_search_permission() {
  return array(
    'administer know4pol search' => array(
      'title' => t('Administer know4pol search'),
      'description' => t('Administer know4pol search'),
    ),
  );
}

/**
 * Implements hook_og_permission().
 */
function know4pol_search_og_permission() {
  return array(
    'configure OG search block content types' => array(
      'title' => t('Configure OG search block content types'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function know4pol_search_menu() {
  $items['admin/config/know4pol_search_settings'] = array(
    'title' => 'Know4pol Search settings',
    'description' => 'Know4pol  search settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_know4pol_search_settings_form'),
    'access arguments' => array('administer know4pol search'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['group/%/%/admin/know4pol_search'] = array(
    'title' => 'Know4pol Search settings',
    'description' => 'Know4pol  search settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_know4pol_search_settings_form', 2),
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('add user', 1, 2),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_og_ui_get_group_admin().
 */
function know4pol_search_og_ui_get_group_admin($group_type, $gid) {
  $items = array();
  if (og_user_access($group_type, $gid, 'configure OG search block content types')) {
    $items['know4pol_search'] = array(
      'title' => t('Configure search'),
      'description' => t('Configure Knowledge for Policy search'),
      'href' => 'admin/know4pol_search',
    );
  }
  return $items;
}

/**
 * Settings for the custom block.
 *
 * @param array $form
 *   The form.
 * @param array &$form_state
 *   The form states.
 * @param int $kc_group_nid
 *   OG group context.
 *
 * @return array
 *   Returns the settings form.
 */
function _know4pol_search_settings_form(array $form, array &$form_state, $kc_group_nid = 0) {
  $form = array();
  $know4pol_search_settings_array = variable_get('know4pol_search_settings');
  $options = node_type_get_names();
  // Remove Newsroom_item.
  unset($options['newsroom_item']);
  unset($options['newsroom_selection']);
  unset($options['newsroom_newsletter_issue']);
  // Add the list of Newsroom items.
  // 'newsroom_item_type' id = 8.
  $newsroom_items_vocabulary = taxonomy_vocabulary_load(8);
  $newsroom_items = taxonomy_get_tree($newsroom_items_vocabulary->vid);
  foreach ($newsroom_items as $value) {
    $options += array(drupal_strtolower($value->name) => $value->name);
  }
  // Settings for Main form.
  if (!$kc_group_nid) {
    $form['Main'] = array(
      '#type' => 'fieldset',
      '#title' => 'Main',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['Main'][0] = array(
      '#type' => 'checkboxes',
      '#options' => _know4pol_search_get_solr_search_pages(),
      '#default_value' => $know4pol_search_settings_array[0],
    );
  }
  // Get all Knowledge Centre nodes.
  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'node');
  $efq->entityCondition('bundle', 'knowledge_centre');
  if ($kc_group_nid) {
    $efq->propertyCondition('nid', $kc_group_nid);
  }
  $efq->propertyOrderBy('title');
  $result = $efq->execute();
  $nids = array_keys($result['node']);
  $nodes = entity_load('node', $nids);
  // Settings per Knowledge Centre.
  foreach ($nodes as $node) {
    $form[$node->title] = array(
      '#type' => 'fieldset',
      '#title' => $node->title,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form[$node->title][$node->nid] = array(
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => $know4pol_search_settings_array[$node->nid],
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Custom search block submit.
 *
 * @param array $form
 *   The form.
 * @param array &$form_state
 *   The form states.
 */
function _know4pol_search_settings_form_submit(array $form, array &$form_state) {
  $output = variable_get('know4pol_search_settings');
  foreach ($form_state['values'] as $key => $value) {
    if (is_numeric($key)) {
      $output[$key] = array_filter($value);
    }
  }
  variable_set('know4pol_search_settings', $output);
  drupal_set_message(t('Search settings saved.'));
}

/**
 * Get allowed content types to search per Knowledge Centre.
 *
 * @param int $nid
 *   Nid of Knowledge Centre.
 *
 * @return array
 *   Returns content types.
 */
function _know4pol_search_get_allowed_content_types($nid = 0) {
  $allowed_options = array();
  $know4pol_search_settings_array = variable_get('know4pol_search_settings');
  if ($nid == 0) {
    return $know4pol_search_settings_array[0];
  }
  if (isset($know4pol_search_settings_array[$nid])) {
    $allowed_options = $know4pol_search_settings_array[$nid];
  }
  // Get human names.
  $types = node_type_get_types();
  // Change newsroom item to news and events, which aren't node types.
  unset($types['newsroom_item']);
  $newsarray = array('type' => 'news', 'name' => 'News');
  $eventsarray = array('type' => 'event', 'name' => 'Events');
  $newsobject = (object) $newsarray;
  $eventsobject = (object) $eventsarray;
  $types['news'] = $newsobject;
  $types['event'] = $eventsobject;
  if (!empty($allowed_options)) {
    foreach ($allowed_options as $allowed_option) {
      $allowed_options[$allowed_option] = $types[$allowed_option]->name;
    }
  }
  // Default option, which isn't a content type.
  $allowed_options['all'] = 'All';
  // Move default option as first option.
  $allowed_options_sorted = array('all' => $allowed_options['all']) + $allowed_options;
  return $allowed_options_sorted;
}
