<?php

/**
 * @file
 * Module file.
 */

/**
 * Implements hook_theme().
 */
function ros_test_theme() {
  return [
    'ros0' => [
      'variables' => [
        'callbacks' => [],
      ],
      'template' => 'ros0',
    ],
    'ros1' => [
      'variables' => [
        'callbacks' => [],
      ],
      'template' => 'ros1',
    ],
    'ros2' => [
      'variables' => [
        'callbacks' => [],
      ],
      'template' => 'ros2',
    ],
    'ros3' => [
      'variables' => [
        'callbacks' => [],
      ],
      // This one has a theme function.
    ],
    'ros4' => [
      'variables' => [
        'callbacks' => [],
      ],
      // This one has a theme function.
    ],
  ];
}

/**
 * Default theme implementation for theme('ros3').
 *
 * @param array $variables
 *
 * @return string
 */
function theme_ros3(array $variables) {
  $variables['callbacks'][] = __FUNCTION__;
  return implode("\n", $variables['callbacks']);
}

/**
 * Default theme implementation for theme('ros4').
 *
 * @param array $variables
 *
 * @return string
 */
function theme_ros4(array $variables) {
  $variables['callbacks'][] = __FUNCTION__;
  return implode("\n", $variables['callbacks']);
}

/**
 * Implements hook_theme_registry_alter().
 *
 * @param array $theme_registry
 */
function ros_test_theme_registry_alter(array &$theme_registry) {

  // Save the intermediate theme registry for later testing.
  variable_set('ros_test_intermediate_theme_registry', $theme_registry);

  if (isset($theme_registry['ros2'])) {
    // Make sure that the key is set.
    $theme_registry['ros2'] += ['preprocess functions' => []];

    // Remove a preprocess function.
    foreach (array_keys($theme_registry['ros2']['preprocess functions'], 'system_preprocess_ros2') as $i) {
      unset($theme_registry['ros2']['preprocess functions'][$i]);
    }

    // Prepend a preprocess function.
    array_unshift($theme_registry['ros2']['preprocess functions'], '_ros_test_preprocess_ros2_custom_prepend');

    // Append a preprocess function.
    $theme_registry['ros2']['preprocess functions'][] = '_ros_test_preprocess_ros2_custom_append';

    // Append another preprocess function.
    // This one does not match the pattern "*_preprocess_HOOK".
    $theme_registry['ros2']['preprocess functions'][] = '_ros_test_phase0_ro_s2_custom_append';

    // Normalize array keys.
    $theme_registry['ros2']['preprocess functions'] = array_values($theme_registry['ros2']['preprocess functions']);
  }

  if (isset($theme_registry['ros3'])) {
    // Append a preprocess function.
    // This one does not match the pattern "*_preprocess_HOOK".
    $theme_registry['ros3']['preprocess functions'][] = '_ros_test_phase0_ro_s3_custom_append';
  }
}

/**
 * This callback is removed in ros_test_theme_registry_alter().
 *
 * @param array $variables
 * @param string $hook
 */
function system_preprocess_ros2(array &$variables, $hook) {
  $variables['callbacks'][] = __FUNCTION__;
}

/**
 * This callback is prepended in ros_test_theme_registry_alter()
 *
 * @param array $variables
 * @param string $hook
 */
function _ros_test_preprocess_ros2_custom_prepend(array &$variables, $hook) {
  $variables['callbacks'][] = __FUNCTION__;
}

/**
 * This callback is appended in ros_test_theme_registry_alter()
 *
 * @param array $variables
 * @param string $hook
 */
function _ros_test_preprocess_ros2_custom_append(array &$variables, $hook) {
  $variables['callbacks'][] = __FUNCTION__;
}

/**
 * This callback is appended in ros_test_theme_registry_alter()
 *
 * Unlike the previous one, its function name does not match 'preprocess_HOOK'.
 *
 * @param array $variables
 * @param string $hook
 */
function _ros_test_phase0_ro_s2_custom_append(array &$variables, $hook) {
  $variables['callbacks'][] = __FUNCTION__;
}

/**
 * This callback is appended in ros_test_theme_registry_alter()
 *
 * @param array $variables
 * @param string $hook
 */
function _ros_test_phase0_ro_s3_custom_append(array &$variables, $hook) {
  $variables['callbacks'][] = __FUNCTION__;
}

/**
 * Implements hook_preprocess_hook().
 */
function ros_test_preprocess_ros0(&$variables, $hook) {
  $variables['callbacks'][] = __FUNCTION__;
}

/**
 * Implements hook_preprocess_hook().
 */
function ros_test_preprocess_ros1(&$variables, $hook) {
  $variables['callbacks'][] = __FUNCTION__;
}

/**
 * Implements hook_preprocess_hook().
 */
function ros_test_preprocess_ros1__variant1(&$variables, $hook) {
  $variables['callbacks'][] = __FUNCTION__;
}

/**
 * Implements hook_preprocess_hook().
 */
function ros_test_preprocess_ros2(&$variables, $hook) {
  $variables['callbacks'][] = __FUNCTION__;
}

/**
 * Implements hook_preprocess_hook().
 */
function ros_test_preprocess_ros2__variant1(&$variables, $hook) {
  $variables['callbacks'][] = __FUNCTION__;
}

/**
 * Implements hook_process_hook().
 */
function ros_test_process_ros0(&$variables, $hook) {
  $variables['callbacks'][] = __FUNCTION__;
}

/**
 * Implements hook_process_hook().
 */
function ros_test_process_ros1(&$variables, $hook) {
  $variables['callbacks'][] = __FUNCTION__;
}

/**
 * Implements hook_process_hook().
 */
function ros_test_process_ros1__variant1(&$variables, $hook) {
  $variables['callbacks'][] = __FUNCTION__;
}

/**
 * Implements hook_process_hook().
 */
function ros_test_process_ros2(&$variables, $hook) {
  $variables['callbacks'][] = __FUNCTION__;
}

/**
 * Implements hook_process_hook().
 */
function ros_test_process_ros2__variant1(&$variables, $hook) {
  $variables['callbacks'][] = __FUNCTION__;
}

/**
 * Implements hook_process_hook().
 */
function ros_test_process_ros2__variant2(&$variables, $hook) {
  $variables['callbacks'][] = __FUNCTION__;
}

/**
 * Implements hook_preprocess_hook().
 */
function ros_test_preprocess_ros4(&$variables, $hook) {
  $variables['callbacks'][] = __FUNCTION__;
}
