<?php

/**
 * @file
 * Install file for the og_fields module.
 */

/**
 * Implements hook_schema().
 */
function og_fields_schema() {
  $schema['og_fields'] = array(
    'description' => 'Relate Og-field settings to bundles',
    'fields' => array(
      'id' => array(
        'description' => 'Primary Key: Unique OG field ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'gid' => array(
        'description' => 'field ID',
        'type'        => 'int',
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'uid' => array(
        'description' => 'user ID',
        'type'        => 'int',
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'entity_type' => array(
        'description' => "On which entity-type the widget should appear.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'bundle' => array(
        'description' => "On which bundle the widget should appear.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'content_type' => array(
        'description' => "Content type.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'settings' => array(
        'description' => 'Serialized array with field instance settings.',
        'type' => 'text',
        'serialize' => TRUE,
        'size' => 'big',
      ),
      'field_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => "The name of the field the OG-field is associated with.",
      ),
      'field_machine_name' => array(
        'description' => "The field's unique.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'extra' => array(
        'descrition' => "Organic Groups API field",
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'children' => array(
        'descrition' => "Fieldgroup children",
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
      ),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implements hook_field_schema().
 */
function og_fields_field_schema($field) {
  switch ($field['type']) {
    case 'text':
      $columns = array(
        'value' => array(
          'type' => 'varchar',
          'length' => $field['settings']['max_length'],
          'not null' => FALSE,
        ),
      );
      break;

    case 'text_long':
      $columns = array(
        'value' => array(
          'type' => 'text',
          'size' => 'big',
          'not null' => FALSE,
        ),
      );
      break;

    case 'text_with_summary':
      $columns = array(
        'value' => array(
          'type' => 'text',
          'size' => 'big',
          'not null' => FALSE,
        ),
        'summary' => array(
          'type' => 'text',
          'size' => 'big',
          'not null' => FALSE,
        ),
      );
      break;
  }
  $columns += array(
    'format' => array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
    ),
  );
  return array(
    'columns' => $columns,
    'indexes' => array(
      'format' => array('format'),
    ),
    'foreign keys' => array(
      'format' => array(
        'table' => 'filter_format',
        'columns' => array('format' => 'format'),
      ),
    ),
  );
}
