<?php

/**
 * @file
 * Code for the know4pol-search feature.
 */

/**
 * Implements hook_permission().
 */
function know4pol_search_permission() {
  return array(
    'administer know4pol search' => array(
      'title' => t('Administer know4pol search'),
      'description' => t('Administer know4pol search'),
    ),
  );
}

/**
 * Implements hook_og_permission().
 */
function know4pol_search_og_permission() {
  return array(
    'configure OG search block content types' => array(
      'title' => t('Configure OG search block content types'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function know4pol_search_menu() {
  $items['admin/config/know4pol_search_settings'] = array(
    'title' => 'Know4pol Search settings',
    'description' => 'Know4pol  search settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_know4pol_search_settings_form'),
    'access arguments' => array('administer know4pol search'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['group/%/%/admin/know4pol_search'] = array(
    'title' => 'Know4pol Search settings',
    'description' => 'Know4pol  search settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_know4pol_search_settings_form', 2),
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('add user', 1, 2),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_og_ui_get_group_admin().
 */
function know4pol_search_og_ui_get_group_admin($group_type, $gid) {
  $items = array();
  if (og_user_access($group_type, $gid, 'configure OG search block content types')) {
    $items['know4pol_search'] = array(
      'title' => t('Configure search'),
      'description' => t('Configure Knowledge for Policy search'),
      'href' => 'admin/know4pol_search',
    );
  }
  return $items;
}

/**
 * Settings for the custom block.
 *
 * @param array $form
 *   The form.
 * @param array &$form_state
 *   The form states.
 * @param int $kc_group_nid
 *   OG group context.
 *
 * @return array
 *   Returns the settings form.
 */
function _know4pol_search_settings_form(array $form, array &$form_state, $kc_group_nid = 0) {
  $form = array();
  $know4pol_search_settings_array = variable_get('know4pol_search_settings');
  $options = node_type_get_names();
  // Remove Newsroom_item.
  unset($options['newsroom_item']);
  unset($options['newsroom_selection']);
  unset($options['newsroom_newsletter_issue']);
  // Add the list of Newsroom items.
  // 'newsroom_item_type' id = 8.
  $newsroom_items_vocabulary = taxonomy_vocabulary_load(8);
  $newsroom_items = taxonomy_get_tree($newsroom_items_vocabulary->vid);
  foreach ($newsroom_items as $value) {
    $options += array(drupal_strtolower($value->name) => $value->name);
  }
  // Settings for Main form.
  if (!$kc_group_nid) {
    $form['Main'] = array(
      '#type' => 'fieldset',
      '#title' => 'Main',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['Main'][0] = array(
      '#type' => 'checkboxes',
      '#options' => _know4pol_search_get_solr_search_pages(),
      '#default_value' => $know4pol_search_settings_array[0],
    );
  }
  // Get all Knowledge Centre nodes.
  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'node');
  $efq->entityCondition('bundle', 'knowledge_centre');
  if ($kc_group_nid) {
    $efq->propertyCondition('nid', $kc_group_nid);
  }
  $efq->propertyOrderBy('title');
  $result = $efq->execute();
  $nids = array_keys($result['node']);
  $nodes = entity_load('node', $nids);
  // Settings per Knowledge Centre.
  foreach ($nodes as $node) {
    $form[$node->title] = array(
      '#type' => 'fieldset',
      '#title' => $node->title,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form[$node->title][$node->nid] = array(
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => $know4pol_search_settings_array[$node->nid],
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Custom search block submit.
 *
 * @param array $form
 *   The form.
 * @param array &$form_state
 *   The form states.
 */
function _know4pol_search_settings_form_submit(array $form, array &$form_state) {
  $output = variable_get('know4pol_search_settings');
  foreach ($form_state['values'] as $key => $value) {
    if (is_numeric($key)) {
      $output[$key] = array_filter($value);
    }
  }
  variable_set('know4pol_search_settings', $output);
  drupal_set_message(t('Search settings saved.'));
}

/**
 * Get allowed content types to search per Knowledge Centre.
 *
 * @param int $nid
 *   Nid of Knowledge Centre.
 *
 * @return array
 *   Returns content types.
 */
function _know4pol_search_get_allowed_content_types($nid = 0) {
  $allowed_options = array();
  $know4pol_search_settings_array = variable_get('know4pol_search_settings');
  if ($nid == 0) {
    return $know4pol_search_settings_array[0];
  }
  if (isset($know4pol_search_settings_array[$nid])) {
    $allowed_options = $know4pol_search_settings_array[$nid];
  }
  // Get human names.
  $types = node_type_get_types();
  // Change newsroom item to news and events, which aren't node types.
  unset($types['newsroom_item']);
  $newsarray = array('type' => 'news', 'name' => 'News');
  $eventsarray = array('type' => 'event', 'name' => 'Events');
  $newsobject = (object) $newsarray;
  $eventsobject = (object) $eventsarray;
  $types['news'] = $newsobject;
  $types['event'] = $eventsobject;
  if (!empty($allowed_options)) {
    foreach ($allowed_options as $allowed_option) {
      $allowed_options[$allowed_option] = $types[$allowed_option]->name;
    }
  }
  // Default option, which isn't a content type.
  $allowed_options['all'] = 'All';
  // Move default option as first option.
  $allowed_options_sorted = array('all' => $allowed_options['all']) + $allowed_options;
  return $allowed_options_sorted;
}

/**
 * Get search query from url and use as defaul_value in form.
 *
 * @return string
 *   Returns content type or keyword.
 */
function _know4pol_search_get_default_content_type() {
  $parameters = drupal_get_query_parameters();
  if (empty($parameters)) {
    return 'all';
  }
  foreach ($parameters['f'] as $bundle_parameter) {
    if (strpos($bundle_parameter, 'bundle:') !== FALSE) {
      $bundle_machine_name = str_replace('bundle:', '', $bundle_parameter);
      return $bundle_machine_name;
    }
  }
}

/**
 * Get search query from url and use as defaul_value in form.
 *
 * @return string
 *   Returns content type or keyword.
 */
function _know4pol_search_get_default_keyword() {
  return arg(2);
}

/**
 * Implements hook_form().
 */
function know4pol_search_form($form, $form_state) {
  $con = context_get();
  if (isset($con['context']['homepage'])) {
    $setting_id = 0;
  }
  else {
    $setting_id = arg(1);
  };
  $form['knowledge_centre_nid'] = array(
    '#type' => 'hidden',
    '#value' => $setting_id,
  );
  // Text field.
  $form['keyword'] = array(
    '#type' => 'textfield',
    '#default_value' => _know4pol_search_get_default_keyword(),
    '#prefix' => '<label id="know4pol-form-label" class="ecl-search-form__textfield-wrapper">',
    '#suffix' => '</label>',
    '#attributes' => array('class' => array('ecl-text-input', 'ecl-search-form__textfield')),
  );
  // Submit button.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
    '#attributes' => array(
      'class' => array('ecl-button',
        'ecl-button--form-primary',
        'ecl-button--primary',
        'ecl-search-form__button',
      ),
    ),
  );
  // Search content type options.
  $form['type'] = array(
    '#type' => 'radios',
    '#weight' => '100',
    '#options' => _know4pol_search_get_allowed_content_types($setting_id),
    '#default_value' => _know4pol_search_get_default_content_type(),
    '#attributes' => array('class' => array('ecl-radio-group', 'container-inline')),
  );

  $form['#attributes'] = array(
    'class' => array('ecl-form', 'ecl-search-form--internal'),
    'id' => 'know4pol-search-form',
  );
  return $form;
}

/**
 * Implements hook_form_submit().
 */
function know4pol_search_form_submit(&$form, &$form_state) {
  global $base_url;
  $keyword = preg_replace('/[^A-Za-z0-9 \-\']/', '', $form_state['values']['keyword']);
  $knowledge_centre_nid = $form_state['values']['knowledge_centre_nid'];
  $content_type = $form_state['values']['type'];
  $is_content_type_selected = FALSE;
  if ($content_type != 'all') {
    $is_content_type_selected = TRUE;
  }
  // Check if a Newsroom item is chosen.
  $newsroom_items_names = array();
  $newsroom_items_vocabulary = taxonomy_vocabulary_machine_name_load('newsroom_item_type');
  $newsroom_items = taxonomy_get_tree($newsroom_items_vocabulary->vid);
  foreach ($newsroom_items as $value) {
    $newsroom_items_names += array(drupal_strtolower($value->name) => $value->name);
  }
  $is_newsroom_item_selected = FALSE;
  // If it's a Newsroom item.
  if (array_key_exists($content_type, $newsroom_items_names)) {
    $is_newsroom_item_selected = TRUE;
  }
  // Building search url, containing list of numbered solr search parameters.
  if ($is_newsroom_item_selected) {
    if (drupal_substr($content_type, -1) == 's') {
      $output = $base_url . '/' . $content_type . '/' . $keyword;
    }
    else {
      $output = $base_url . '/' . $content_type . 's/' . $keyword;
    }
  }
  else {
    $output = $base_url . '/search/site/' . $keyword;
  }
  $i = 0;
  if (($is_content_type_selected && !$is_newsroom_item_selected) || $knowledge_centre_nid) {
    $output .= '?';
  }
  if ($knowledge_centre_nid) {
    $output .= 'f[' . $i . ']=sm_og_group_ref:node:' . $knowledge_centre_nid;
    $i++;
  }
  if ($is_content_type_selected && $knowledge_centre_nid) {
    $output .= '&';
  }
  if ($is_content_type_selected && !$is_newsroom_item_selected) {
    $output .= 'f[' . $i . ']=bundle:' . $content_type;
    $i++;
  }
  $form_state['redirect'] = $output;
}

/**
 * Get list of the solar pages and urls.
 *
 * @return array
 *   Returns url and label.
 */
function _know4pol_search_get_solr_search_pages() {
  $search_pages = apachesolr_search_load_all_search_pages();
  foreach ($search_pages as $search_page) {
    $output[$search_page['search_path']] = $search_page['label'];
  }
  $output['search/site'] = 'All';
  return $output;
}

/**
 * Get allowed search pages on homepage.
 *
 * @return array
 *   Returns search pages.
 */
function _know4pol_search_get_allowed_search_pages() {
  $know4pol_search_settings_array = variable_get('know4pol_search_settings');
  $allowed_options = $know4pol_search_settings_array[0];
  // Get human names.
  $types = _know4pol_search_get_solr_search_pages();
  foreach ($allowed_options as $allowed_option) {
    $allowed_options[$allowed_option] = $types[$allowed_option];
  }
  $allowed_options['search/site'] = 'All';
  // Move default option as first option.
  $allowed_options_sorted = array('search/site' => $allowed_options['search/site']) + $allowed_options;
  return $allowed_options_sorted;
}

/**
 * Implements hook_form().
 */
function know4pol_mainsearch_form($form, $form_state) {
  // Text field.
  $form['keyword'] = array(
    '#type' => 'textfield',
    '#default_value' => _know4pol_search_get_default_keyword(),
    '#prefix' => '<label id="know4pol-form-label" class="ecl-search-form__textfield-wrapper">',
    '#suffix' => '</label>',
    '#attributes' => array('class' => array('ecl-text-input', 'ecl-search-form__textfield')),
  );
  // Submit button.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
    '#attributes' => array(
      'class' => array('ecl-button',
        'ecl-button--form-primary',
        'ecl-button--primary',
        'ecl-search-form__button',
      ),
    ),
  );
  // Search solr page type options.
  $form['solr_search_page'] = array(
    '#type' => 'radios',
    '#weight' => '100',
    '#options' => _know4pol_search_get_allowed_search_pages(),
    '#default_value' => 'search/site',
    '#attributes' => array('class' => array('ecl-radio-group', 'container-inline')),
  );
  $form['#attributes'] = array(
    'class' => array('ecl-form', 'ecl-search-form--internal'),
    'id' => 'know4pol-search-form',
  );
  return $form;
}

/**
 * Implements hook_form_submit().
 */
function know4pol_mainsearch_form_submit(&$form, &$form_state) {
  global $base_url;
  $keyword = preg_replace('/[^A-Za-z0-9\- \']/', '', $form_state['values']['keyword']);
  $solr_search_page = $form_state['values']['solr_search_page'];
  // Building search url, containing list of numbered solr search parameters.
  $output = $base_url . '/' . $solr_search_page . '/' . $keyword;
  $form_state['redirect'] = $output;
}

/**
 * Implements hook_block_info().
 */
function know4pol_search_block_info() {
  $blocks['know4pol_search'] = array(
    'info' => t('Know4pol search form block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['know4pol_main_search'] = array(
    'info' => t('Know4pol main search form block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['know4pol_ks_topics'] = array(
    'info' => t('Know4pol KS topics block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['know4pol_ks_countries'] = array(
    'info' => t('Know4pol KS countries block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['know4pol_ks_all'] = array(
    'info' => t('Know4pol KS countries plus topics block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['apachesolr_freetext_search_block'] = array(
    'info' => t('Apache Solr Search Block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Displays the search form block.
 */
function know4pol_search_block_view($delta = '') {
  $block = array();
  // Prevent strict warnings.
  $searchform = drupal_get_form('know4pol_search_form');
  $mainsearchform = drupal_get_form('know4pol_mainsearch_form');
  switch ($delta) {
    case 'apachesolr_freetext_search_block':
      if (arg(0) == 'search' && arg(1) == 'site') {
        $keys = urldecode(arg(2));
      }
      else {
        $keys = urldecode(arg(1));
      }
      $block_content = drupal_get_form('_know4pol_search_freetext_search_form', $keys);
      $block['content'] = drupal_render($block_content);
      break;

    case 'know4pol_search':
      $block['subject'] = '';
      $block['content'] = drupal_render($searchform);
      break;

    case 'know4pol_main_search':
      $block['subject'] = '';
      $block['content'] = drupal_render($mainsearchform);
      break;

    case 'know4pol_ks_topics':
      $block['subject'] = '<h3 class="ecl-list-item__title ecl-heading ecl-heading--h3">Browse by :</h3>';
      $block['content'] = _know4pol_search_topics_dropdown_list();
      break;

    case 'know4pol_ks_countries':
      $block['subject'] = '<h3 class="ecl-list-item__title ecl-heading ecl-heading--h3">Browse by :</h3>';
      $block['content'] = _know4pol_search_countries_dropdown_list();
      break;

    case 'know4pol_ks_all':
      $block['subject'] = '<h3 class="ecl-list-item__title ecl-heading ecl-heading--h3">Browse by :</h3>';
      $block['content'] = _know4pol_search_all_dropdown_list();
      break;
  }
  return $block;
}

/**
 * Returns html code for topic and countries dropdown divs.
 *
 * @return string
 *   Returns the block html.
 */
function _know4pol_search_all_dropdown_list() {
  $html_topics_list = _know4pol_search_topic_links_into_rows(_know4pol_search_get_topics_list());
  $html_countries_list = _know4pol_search_country_links_into_rows(_know4pol_search_get_countries_list());
  $block_buttons = '';
  $block_content = '';

  if (!empty($html_topics_list)) {
    $block_buttons .= '<button type="button" class="ecl-button ecl-button--default ecl-expandable__button" id="topic_button">Topics &#9660;</button>';
    $block_content .= '<div id="topics-dropdown-list" class="row dropdown-list">
                         <div class="col-sm-12">' . $html_topics_list . '</div>
                       </div>';
  }
  if (!empty($html_countries_list)) {
    $block_buttons .= '<button type="button" class="ecl-button ecl-button--default ecl-expandable__button" id="country_button">Countries &#9660;</button>';
    $block_content .= '<div id="countries-dropdown-list" class="row dropdown-list">
                         <div class="col-sm-12">' . $html_countries_list . '</div>
                       </div>';
  }

  // Creating the block now.
  if (!empty($html_countries_list) || !empty($html_topics_list)) {
    $block = '<div class="browse-by-block">';
    $block .= $block_buttons;
    $block .= $block_content;
    $block .= '</div>';
    return $block;
  }
}

/**
 * Returns html code for topic dropdown div.
 */
function _know4pol_search_topics_dropdown_list() {
  $html_topics_list = _know4pol_search_topic_links_into_rows(_know4pol_search_get_topics_list());
  if (!empty($html_topics_list)) {
    return '<div class="browse-by-block">
              <button type="button" class="ecl-button ecl-button--default ecl-expandable__button" id="topic_button">Topics &#9660;</button>
              <div id="topics-dropdown-list" class="row dropdown-list">
                <div class="col-sm-12">' . $html_topics_list . '</div>
              </div>
            </div>';
  }
}

/**
 * Returns html code for countries dropdown div.
 */
function _know4pol_search_countries_dropdown_list() {
  $html_countries_list = _know4pol_search_country_links_into_rows(_know4pol_search_get_countries_list());
  if (!empty($html_countries_list)) {
    return '<div class="browse-by-block">
              <button type="button" class="ecl-button ecl-button--default ecl-expandable__button" id="country_button">Countries &#9660;</button>
              <div id="countries-dropdown-list" class="row dropdown-list">
                <div class="col-sm-12">' . $html_countries_list . '</div>
              </div>
            </div>';
  }
}

/**
 * Get the list of topics related to an OG.
 *
 * @return array
 *   Returns list of links to topic pages.
 */
function _know4pol_search_get_topics_list() {
  // Current group id.
  $group = og_context();
  $query = new EntityFieldQuery();
  $result = array();
  $result = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'topic')
    ->propertyCondition('status', 1)
    ->fieldCondition('og_group_ref', 'target_id', $group['gid'])
    ->fieldOrderBy('field_weight', 'value', 'ASC')
    ->propertyOrderBy('title')
    ->execute();
  if (empty($result['node'])) {
    return $result;
  }
  $nids = array_keys($result['node']);
  $topics = node_load_multiple($nids);
  foreach ($topics as $topic) {
    $links[] = l($topic->title, 'node/' . $topic->nid, array('attributes' => array('class' => array('ecl-link', 'ecl-list-item__link'))));
  }
  return $links;
}

/**
 * Get the list of countries related to an OG.
 *
 * @return array
 *   Returns list of links to country pages.
 */
function _know4pol_search_get_countries_list() {
  // Current group id.
  $group = og_context();
  $query = new EntityFieldQuery();
  $result = array();
  $result = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'country')
    ->propertyCondition('status', 1)
    ->fieldCondition('og_group_ref', 'target_id', $group['gid'])
    ->fieldOrderBy('field_weight', 'value', 'ASC')
    ->propertyOrderBy('title')
    ->execute();
  if (empty($result['node'])) {
    return $result;
  }
  $nids = array_keys($result['node']);
  $countries = node_load_multiple($nids);
  foreach ($countries as $country) {
    $term = taxonomy_get_parents($country->field_cnt_related_country_tags[LANGUAGE_NONE][0]['tid']);
    $term = reset($term);
    $links[$term->name][] = l($country->title, 'node/' . $country->nid, array('attributes' => array('class' => array('ecl-link', 'ecl-list-item__link'))));
  }
  return $links;
}

/**
 * Get allowed search pages on homepage.
 *
 * @param array $links
 *   Links to the nodes.
 *
 * @return array
 *   Returns themed html list of links to topic pages.
 */
function _know4pol_search_country_links_into_rows(array $links = array()) {
  $output = "";
  if (!empty($links['EU'])) {
    // Adding the EU country members.
    $output = "<h2>EU</h2>";
    $output .= '<ul class="ecl-listing ecl-listing--three-columns">';
    foreach ($links['EU'] as $link) {
      $output .= '<li class="ecl-list-item ecl-list-item--three-columns">' . $link . '</li>';
    }
    $output .= '</ul>';
  }
  if (!empty($links['Non-EU'])) {
    // Adding the Non-EU country memebers.
    $output .= "<h2>Non-EU</h2>";
    $output .= '<ul class="ecl-listing ecl-listing--three-columns">';
    foreach ($links['Non-EU'] as $link) {
      $output .= '<li class="ecl-list-item ecl-list-item--three-columns">' . $link . '</li>';
    }
    $output .= '</ul>';
  }
  return $output;
}

/**
 * Get allowed search pages on homepage.
 *
 * @param array $links
 *   Links to the nodes.
 *
 * @return array
 *   Returns themed html list of links to topic pages.
 */
function _know4pol_search_topic_links_into_rows(array $links = array()) {
  $output = "";
  if (!empty($links)) {
    $output = '<ul class="ecl-listing ecl-listing--three-columns">';
    foreach ($links as $link) {
      $output .= '<li class="ecl-list-item ecl-list-item--three-columns">' . $link . '</li>';
    }
    $output .= '</ul>';
  }
  return $output;
}

/**
 * The free text search form for ApacheSolr pages.
 *
 * @param object $keys
 *   The search words/keys.
 */
function _know4pol_search_freetext_search_form($form, &$form_state, $keys = '') {
  $form = array();
  $form['#id'] = 'freetext-search-form';
  $form['#attributes']['class'][] = 'ecl-search-form';
  $form['#attributes']['class'][] = 'ecl-search-form--internal';
  $form['#attributes']['class'][] = 'ecl-u-mb-l';

  $form['keys'] = array(
    '#type' => 'textfield',
    '#default_value' => $keys,
    '#size' => 20,
    '#maxlength' => 255,
    '#attributes' => array(
      'class' => array('ecl-text-input',
        'ecl-search-form__textfield',
      ),
    ),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#attributes' => array(
      'class' => array('ecl-button',
        'ecl-button--form-primary',
        'ecl-search-form__button',
      ),
    ),
  );

  return $form;
}

/**
 * The submit function for the free text search form for ApacheSolr pages.
 */
function _know4pol_search_freetext_search_form_submit(&$form, &$form_state) {
  // Should get the URL from the defined search pages.
  if (arg(0) == 'search' && arg(1) == 'site') {
    $redirect = 'search/site';
  }
  else {
    $redirect = arg(0);
  }
  $redirect_value = rawurlencode($form_state['values']['keys']);
  if (drupal_strlen($form_state['values']['keys'])) {
    $redirect .= '/' . $redirect_value;
  }

  $get = drupal_get_query_parameters();
  if (!empty($get)) {
    unset($get['q']);
    // Reset to first page.
    unset($get['page']);
  }
  $form_state['redirect'] = array($redirect, array('query' => $get));
}

/**
 * Implements hook_apachesolr_facet_items_alter().
 */
function know4pol_search_facet_items_alter(&$build, &$settings) {
  // Content type facet.
  switch ($settings->facet) {
    case "bundle":
      if (isset($build['newsroom_item'])) {
        $build = _know4pol_search_split_newsroom_item($build);
        // Remove original filter anyway.
        unset($build['newsroom_item']);
      }
      break;

    case "sm_field_ks_related_topics":
      // Replace the available list by the created one.
      $build = _know4pol_search_facet_filter_field_ks_related_topics($build);
      break;
  }
}

/**
 * Split newsroom item in subtypes(News and Events).
 *
 * @param array $build
 *   The build array of the facet.
 *
 * @return array
 *   The new list of items.
 */
function _know4pol_search_split_newsroom_item(array $build) {
  $nr_facet_name = 'im_field_newsroom_item_type';
  $solr_pages = apachesolr_search_load_all_search_pages();

  // Split newsroom item in subtypes by getting the term facet.
  if ($adapter = _know4pol_ec_europa_get_solr_instance()) {
    $searcher = $adapter->getSearcher();
    $nr_type = $adapter->getFacet(facetapi_facet_load($nr_facet_name, $searcher));
    foreach ($nr_type->getBuild() as $key => $item) {
      // Get url for dedicated solR search page.
      foreach ($solr_pages as $solr_page) {
        if ($solr_page['label'] == $item['#markup'] || $solr_page['label'] == $item['#markup'] . 's') {
          $item['#path'] = $solr_page['search_path'];
          break;
        }
      }
      // Remove self since target page is already filtered.
      // Loop could be avoided if sure that self is always last.
      foreach ($item['#query']['f'] as $index => $value) {
        if ($value == $nr_facet_name . ':' . $item['#indexed_value']) {
          unset($item['#query']['f'][$index]);
          break;
        }
      }
      $build[$key] = $item;
    }
  }
  return $build;
}

/**
 * Filter the field_ks_related_topics facet to only show the related KS topics.
 *
 * @param array $build
 *   The build array of the facet.
 *
 * @return array
 *   The topics of the chosen KS.
 */
function _know4pol_search_facet_filter_field_ks_related_topics(array $build) {
  $params = drupal_get_query_parameters();
  foreach ($params['f'] as $param) {
    $field = explode(':', $param);
    if ($field[0] == sm_og_group_ref) {
      $gid = $field[2];
    }
  }
  if ($gid) {
    $query = db_select('node', 'n')
      ->fields('n', array('nid'));
    $query->join('og_membership', 'ogm', 'ogm.etid = n.nid');
    $query->condition('ogm.gid', $gid, '=');
    $query->condition('n.type', 'topic', '=');
    $ks_topics = $query->execute()->fetchAll();
    $new_topic_list = array();
    foreach ($ks_topics as $topic) {
      $topic_item = 'node:' . $topic->nid;
      if (in_array($topic_item, array_keys($build))) {
        $new_topic_list[$topic_item] = $build[$topic_item];
      }
    }
    return $new_topic_list;
  }
}

/**
 * Implements hook_facetapi_sort_info().
 */
function know4pol_search_facetapi_sort_info() {
  $sorts = array();
  $sorts['ogvocab'] = array(
    'label' => t('OG vocab taxonomy'),
    'callback' => '_know4pol_search_facetapi_sort_ogvocab',
    'description' => t('Sort by taxonomy created into OG vocab'),
    'weight' => -5,
  );

  return $sorts;
}

/**
 * Facetapi sort, by vid of term.
 *
 * @see uasort()
 */
function _know4pol_search_facetapi_sort_ogvocab(array &$a, array &$b) {
  $ta = _know4pol_search_facetapi_load_term($a);
  $tb = _know4pol_search_facetapi_load_term($b);
  // Compare vid.
  return ($ta->vid == $tb->vid) ? 0 : (($ta->vid > $tb->vid) ? -1 : 1);
}

/**
 * Implements hook_facetapi_filters().
 */
function know4pol_search_facetapi_filters() {
  return array(
    'exclude_og_vocab' => array(
      'handler' => array(
        'label' => t('Exclude specific og vocabularies'),
        'class' => 'Know4polSearchFacetapiExcludeOGVocab',
      ),
    ),
  );
}

/**
 * Parse term_id from facetapi indexed term and load term.
 *
 * @param array &$facetapi_term
 *   The indexed_term value from facetapi.
 *
 * @return object
 *   The stored or loaded term by taxonomy_term_load().
 */
function _know4pol_search_facetapi_load_term(array &$facetapi_term) {
  if (!isset($facetapi_term['term'])) {
    // Parse tid from indexed value.
    if (preg_match('/\:([0-9]+)$/', $facetapi_term['#indexed_value'], $r) != 1) {
      return NULL;
    }
    // Load term and store for next usage (performance)
    $facetapi_term['term'] = taxonomy_term_load($r[1]);
  }
  return $facetapi_term['term'];
}

/**
 * Implements hook_facetapi_widgets().
 */
function know4pol_search_facetapi_widgets() {
  return array(
    'know4pol_search_ogvocab_list' => array(
      'handler' => array(
        'label' => t('OG vocab taxonomy'),
        'class' => 'Know4polSearchFacetapiWidgetOGVocab',
        'query types' => array('term'),
      ),
    ),
  );
}

/**
 * Implements hook_apachesolr_query_prepare().
 */
function know4pol_search_apachesolr_query_prepare($query) {
  $menu_item = menu_get_item();
  // Determine which apache solR page is viewed.
  switch ($menu_item['map'][0]) {
    case 'events':
    case 'news':
      $query->setAvailableSort('ds_field_newsroom_item_date', array('title' => t('NR Date'), 'default' => 'desc'));
      $query->setSolrsort('ds_field_newsroom_item_date', 'desc');
      break;

    default:
      $query->setAvailableSort('ds_field_last_update', array('title' => t('Last update'), 'default' => 'desc'));
      $query->setSolrsort('ds_field_last_update', 'desc');
      break;

  }
}

/**
 * Implements hook_apachesolr_query_alter().
 */
function know4pol_search_apachesolr_query_alter($query) {
  $query->addParam('fl', 'ds_field_newsroom_item_date');
  $query->addParam('fl', 'ds_field_last_update');
}

/**
 * Implements hook_apachesolr_index_document_build_node().
 */
function know4pol_search_apachesolr_index_document_build_node(ApacheSolrDocument $document, $entity, $entity_type) {

  switch ($entity->type) {
    case 'newsroom_item':
      // Add signle field newsroom date in SolR index.
      $document->addField('ds_field_newsroom_item_date', apachesolr_date_iso($entity->field_newsroom_item_date[LANGUAGE_NONE][0]['value']));
      break;

    default:
      $document->addField('ds_field_last_update', apachesolr_date_iso(strtotime($entity->field_last_update[LANGUAGE_NONE][0]['value'])));
      break;
  }
}
