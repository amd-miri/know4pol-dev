<?php

/**
 * @file
 * Code for the know4pol-search feature.
 */

/**
 * Implements hook_permission().
 */
function know4pol_search_permission() {
  return array(
    'administer know4pol search' => array(
      'title' => t('Administer know4pol search'),
      'description' => t('Administer know4pol search'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function know4pol_search_menu() {
  $items['admin/config/know4pol_search_settings'] = array(
    'title' => 'Know4pol Search settings',
    'description' => 'Know4pol  search settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_know4pol_search_settings_form'),
    'access arguments' => array('administer know4pol search'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Settings for the custom block.
 *
 * @param array $form
 *   The form.
 * @param array &$form_state
 *   The form states.
 *
 * @return array
 *   Returns the settings form.
 */
function _know4pol_search_settings_form($form, &$form_state) {

  $form = array();
  $know4pol_search_settings_array = variable_get('know4pol_search_settings');
  $options = node_type_get_names();

  // Settings for Main form.
  $form['Main'] = array(
    '#type' => 'fieldset',
    '#title' => 'Main',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['Main'][0] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => $know4pol_search_settings_array[0],
  );

  // Get all Knowledge Centre nodes.
  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'node');
  $efq->entityCondition('bundle', 'knowledge_centre');
  $efq->propertyOrderBy('title');
  $result = $efq->execute();
  $nids = array_keys($result['node']);
  $nodes = entity_load('node', $nids);

  // Settings per Knowledge Centre.
  foreach ($nodes as $node) {
    $form[$node->title] = array(
      '#type' => 'fieldset',
      '#title' => $node->title,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form[$node->title][$node->nid] = array(
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => $know4pol_search_settings_array[$node->nid],
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Custom search block submit.
 *
 * @param array $form
 *   The form.
 * @param array &$form_state
 *   The form states.
 */
function _know4pol_search_settings_form_submit($form, &$form_state) {

  foreach ($form_state['values'] as $key => $value) {
    if (is_numeric($key)) {
      $output[$key] = array_keys(array_filter($value));
    }
  }
  variable_set('know4pol_search_settings', $output);
  drupal_set_message(t('Search settings saved.'));
}

/**
 * Get allowed content types to search per Knowledge Centre.
 *
 * @param int $nid
 *   Nid of Knowledge Centre or 'main'.
 *
 * @return array
 *   Returns content types.
 */
function _know4pol_search_get_allowed_content_types($nid) {

  $know4pol_search_settings_array = variable_get('know4pol_search_settings');
  $activated_content_types = $know4pol_search_settings_array[$nid];
  $options = node_type_get_names();
  $allowed_options = array_intersect_key($options, array_flip($activated_content_types));
  // Default option, which isn't a content type.
  $allowed_options['all'] = 'All';
  // Move default option as first option.
  $allowed_options_sorted = array('all' => $allowed_options['all']) + $allowed_options;
  return $allowed_options_sorted;
}

/**
 * Get search query from url and use as defaul_value in form.
 *
 * @return string
 *   Returns content type or keyword.
 */
function _know4pol_search_get_default_content_type() {

  $parameters = drupal_get_query_parameters();

  if (empty($parameters)) {
    return 'all';
  }

  foreach ($parameters['f'] as $bundle_parameter) {
    if (strpos($bundle_parameter, 'bundle:') !== FALSE) {
      $bundle_machine_name = str_replace('bundle:', '', $bundle_parameter);
      return $bundle_machine_name;
    }
  }
}

/**
 * Get search query from url and use as defaul_value in form.
 *
 * @return string
 *   Returns content type or keyword.
 */
function _know4pol_search_get_default_keyword() {
  return arg(2);
}

/**
 * Implements hook_form().
 */
function know4pol_search_form($form, $form_state) {

  $form['keyword'] = array(
    '#type' => 'textfield',
    '#default_value' => _know4pol_search_get_default_keyword(),
  );

  $con = context_get();
  if (isset($con['context']['homepage'])) {
    $setting_id = 0;
  }
  else {
    $setting_id = arg(1);
  };

  $form['knowledge_centre_nid'] = array(
    '#type' => 'hidden',
    '#value' => $setting_id,
  );

  $form['type'] = array(
    '#type' => 'radios',
    '#weight' => '100',
    '#options' => _know4pol_search_get_allowed_content_types($setting_id),
    '#default_value' => _know4pol_search_get_default_content_type(),
    '#attributes' => array('class' => array('container-inline')),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
    '#attributes' => array('class' => array('ecl-button', 'ecl-button--primary', 'ecl-u-f-r')),
    '#weight' => -1,
  );

  $form['#attributes'] = array('class' => 'ecl-form', 'id' => 'know4pol-search-form');

  return $form;
}

/**
 * Implements hook_form_submit().
 */
function know4pol_search_form_submit(&$form, &$form_state) {
  global $base_url;

  $keyword = preg_replace('/[^A-Za-z0-9\-\']/', '', $form_state['values']['keyword']);

  $knowledge_centre_nid = $form_state['values']['knowledge_centre_nid'];
  $content_type = $form_state['values']['type'];

  $is_content_type_selected = FALSE;
  if ($content_type != 'all') {
    $is_content_type_selected = TRUE;
  }

  // Building search url, containing list of numbered solr search parameters.
  $output = $base_url . '/search/site/' . $keyword;
  $i = 0;

  if ($is_content_type_selected || $knowledge_centre_nid) {
    $output .= '?';
  }

  if ($knowledge_centre_nid) {
    $output .= 'f[' . $i . ']=sm_og_group_ref:node:' . $knowledge_centre_nid;
    $i++;
  }

  if ($is_content_type_selected && $knowledge_centre_nid) {
    $output .= '&';
  }

  if ($is_content_type_selected) {
    $output .= 'f[' . $i . ']=bundle:' . $content_type;
    $i++;
  }

  $form_state['redirect'] = $output;
}

/**
 * Implements hook_block_info().
 */
function know4pol_search_block_info() {
  $blocks['know4pol_search'] = array(
    'info' => t('Know4pol search form block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Displays the search form block.
 */
function know4pol_search_block_view($delta = '') {
  $block = array();

  // Prevent strict warnings.
  $searchform = drupal_get_form('know4pol_search_form');

  switch ($delta) {
    case 'know4pol_search':
      $block['subject'] = '';
      $block['content'] = drupal_render($searchform);
      break;
  }
  return $block;
}
