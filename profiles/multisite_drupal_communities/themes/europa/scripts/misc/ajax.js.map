{"version":3,"sources":["misc/ajax.js"],"names":["_this","this","Drupal","ajax","prototype","beforeSend","xmlhttprequest","options","form","extraData","ajax_iframe_upload","v","jQuery","fieldValue","element","name","addClass","attr","progress","type","progressBar","id","eval","update_callback","method","error_callback","message","setProgress","url","startMonitoring","interval","object","after","is","append"],"mappings":"CAAC,WACC,YAEA,IAAIA,OAAQC,IAURC,QAAOC,MAAQD,OAAOC,KAAKC,YAC7BF,OAAOC,KAAKC,UAAUC,WAAa,SAAUC,eAAgBC,SAU3D,GAAIP,MAAMQ,KAAM,CACdD,QAAQE,UAAYF,QAAQE,cAK5BF,QAAQE,UAAUC,mBAAqB,GAOvC,IAAIC,GAAIC,OAAOC,WAAWb,MAAMc,QACtB,QAANH,IACFJ,QAAQE,UAAUT,MAAMc,QAAQC,MAAQJ,GAW5C,GAHAC,OAAOZ,MAAMc,SAASE,SAAS,qBAAqBC,KAAK,YAAY,GAGzC,QAAxBjB,MAAMkB,SAASC,KAAgB,CACjC,GAAIC,aAAc,GAAIlB,QAAOkB,YAAY,iBAAmBpB,MAAMc,QAAQO,GAAIC,KAAKtB,MAAMkB,SAASK,iBAAkBvB,MAAMkB,SAASM,OAAQF,KAAKtB,MAAMkB,SAASO,gBAE3JzB,OAAMkB,SAASQ,SACjBN,YAAYO,YAAY,GAAI3B,MAAMkB,SAASQ,SAGzC1B,MAAMkB,SAASU,KACjBR,YAAYS,gBAAgB7B,MAAMkB,SAASU,IAAK5B,MAAMkB,SAASY,UAAY,MAG7E9B,MAAMkB,SAASJ,QAAUF,OAAOQ,YAAYN,SAASE,SAAS,mCAC9DhB,MAAMkB,SAASa,OAASX,YAExBR,OAAOZ,MAAMc,SAASkB,MAAMhC,MAAMkB,SAASJ,aACV,aAAxBd,MAAMkB,SAASC,OACxBnB,MAAMkB,SAASJ,QAAUF,OAAO,0GAE5BA,OAAOZ,MAAMc,SAASmB,GAAG,UACvBjC,MAAMkB,SAASQ,SACjBd,OAAO,YAAaZ,MAAMkB,SAASJ,SAASkB,MAAM,wBAA0BhC,MAAMkB,SAASQ,QAAU,UAEvGd,OAAOZ,MAAMc,SAASkB,MAAMhC,MAAMkB,SAASJ,WAGvCd,MAAMkB,SAASQ,SACjBd,OAAO,YAAaZ,MAAMkB,SAASJ,SAASoB,OAAO,wBAA0BlC,MAAMkB,SAASQ,QAAU,UAExGd,OAAOZ,MAAMc,SAASoB,OAAOlC,MAAMkB,SAASJ","file":"misc/ajax.js","sourcesContent":["(function () {\n  'use strict';\n\n  var _this = this;\n\n  /**\n   * @file\n   * Overriding some of the default ajax behaviors.\n   */\n\n  /**\n   * Override Drupal's AJAX prototype beforeSend to append the throbber to pager.\n   */\n  if (Drupal.ajax && Drupal.ajax.prototype) {\n    Drupal.ajax.prototype.beforeSend = function (xmlhttprequest, options) {\n      // For forms without file inputs, the jQuery Form plugin serializes the form\n      // values, and then calls jQuery's jQuery.ajax() function, which invokes this\n      // handler. In this circumstance, options.extraData is never used. For forms\n      // with file inputs, the jQuery Form plugin uses the browser's normal form\n      // submission mechanism, but captures the response in a hidden IFRAME. In this\n      // circumstance, it calls this handler first, and then appends hidden fields\n      // to the form to submit the values sin options.extraData. There is no simple\n      // way to know which submission mechanism will be used, so we add to extraData\n      // regardless, and allow it to be ignored in the former case.\n      if (_this.form) {\n        options.extraData = options.extraData || {};\n\n        // Let the server know when the IFRAME submission mechanism is used. The\n        // server can use this information to wrap the JSON response in a TEXTAREA,\n        // as per http://jquery.malsup.com/form/#file-upload.\n        options.extraData.ajax_iframe_upload = '1';\n\n        // The triggering element is about to be disabled (see below), but if it\n        // contains a value (e.g., a checkbox, textfield, select, etc.), ensure that\n        // value is included in the submission. As per above, submissions that use\n        // jQuery.ajax() are already serialized prior to the element being disabled, so\n        // this is only needed for IFRAME submissions.\n        var v = jQuery.fieldValue(_this.element);\n        if (v !== null) {\n          options.extraData[_this.element.name] = v;\n        }\n      }\n\n      // Disable the element that received the change to prevent user interface\n      // interaction while the Ajax request is in progress. ajax.ajaxing prevents\n      // the element from triggering a new request, but does not prevent the user\n      // from changing its value.\n      jQuery(_this.element).addClass('progress-disabled').attr('disabled', true);\n\n      // Insert progressbar or throbber.\n      if (_this.progress.type === 'bar') {\n        var progressBar = new Drupal.progressBar('ajax-progress-' + _this.element.id, eval(_this.progress.update_callback), _this.progress.method, eval(_this.progress.error_callback));\n\n        if (_this.progress.message) {\n          progressBar.setProgress(-1, _this.progress.message);\n        }\n\n        if (_this.progress.url) {\n          progressBar.startMonitoring(_this.progress.url, _this.progress.interval || 1500);\n        }\n\n        _this.progress.element = jQuery(progressBar.element).addClass('ajax-progress ajax-progress-bar');\n        _this.progress.object = progressBar;\n\n        jQuery(_this.element).after(_this.progress.element);\n      } else if (_this.progress.type === 'throbber') {\n        _this.progress.element = jQuery('<div class=\"ajax-progress ajax-progress-throbber\"><i class=\"icon icon--spinner is-spinning\"></i></div>');\n        // If element is an input type, append after.\n        if (jQuery(_this.element).is('input')) {\n          if (_this.progress.message) {\n            jQuery('.throbber', _this.progress.element).after('<div class=\"message\">' + _this.progress.message + '</div>');\n          }\n          jQuery(_this.element).after(_this.progress.element);\n        } else {\n          // Otherwise inject it inside the element.\n          if (_this.progress.message) {\n            jQuery('.throbber', _this.progress.element).append('<div class=\"message\">' + _this.progress.message + '</div>');\n          }\n          jQuery(_this.element).append(_this.progress.element);\n        }\n      }\n    };\n  }\n\n}());\n//# sourceMappingURL=ajax.js.map"],"sourceRoot":"../src/"}